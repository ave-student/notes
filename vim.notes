--notes: vim

@@n Комментирование в vim
@@t vim, comments, tcomment
@@d

						Комментирование в vim

Для быстрого комментирования в vim, можно установить плагин TComment. 
Он позволяет использовать горячие клавиши для комментирования строк и
блоков кода. Ниже приведены некоторые полезные комбинации клавиш.

							Режим вставки
<C-_><C-_> - комментировать/раскомментировать строку
<C-_>r - комментировать справа от курсора
<C-_>b - вставить многострочный комментарий (блок)

						   Нормальный режим
g>nj - комментировать n строк вниз
g>nk - комментировать n строк вверх
g<nj - раскомментировать n строк вниз
g<nk - раскомментировать n строк вверх

@@n Макросы в vim
@@t macros, vim, qa, last command
@@d

						  Последняя команда

Команда "." повторно выполняет последнее действие.

							Макросы в vim

Для начала записи макроса необходимо нажать клавиши "qa" в нормальном
режиме (в данном случае q - начало записи макроса, a - регистр для
записи макроса, который можно менять для сохранения нескольких
макросов). Далее производятся все необходимые действия, после чего для
завершения записи снова нажимается клавиша "q".
Для выполнения макроса в нормальном режиме вводится "@a" (выполнить
макрос, содержащийся в регистре 'a').

Для создания рекурсивного макроса необходимо прописать команду вызова
макроса внутри макроса:

:qr<macros>@rq

Вывести содержимое регистра в текст:

"<register>p

Копировать текст в регистр макроса:

0"<register>y$

Прописать макрос в vimrc:

let @<register>='<macros>'
.

@@n Отступы в vim
@@t indent, vim, autoindent
@@d

							Отступы в vim

Для создания отступов в тексте предусмотрены следующие комбинации
клавиш:

						   Визуальный режим
>nj - вставить отступ для n строк вниз
>nk - вставить отступ для n строк вверх

@@n Проверка орфорграфии
@@t checking, vim
@@d

						 Проверка орфографии

Для включения проверки орфографии необходимо выполнить команду:

:setlocal spell spelllang=en_us

Для получения помощи по проверке орфографии наберите:

:help spell

@@n Форматирование текста
@@t formating, format, vim, gwap, center
@@d

						Форматирование текста

Для форматирования текста в vim используются следующие команды:

:set textwidth=n
устанавливает значение ширины текста, n - количество символов;

:center
:left
:right
команды выравнивания текста.

При необходимости переформатировать параграф, можно воспользоваться
командой:

:set textwidth=70
gwap				# установит ширину текста в 70 символов для
					# текущего абзаца

@@n Поиск и замена последовательности символов
@@t search, replace
@@d

Для поиска последоваетльности символов в vim достаточно в нормальном
режиме ввести символ "/" и последовательность искомых символов, либо
регулярное выражение.
Замена последовательности символов производится с помощью следующей
командной конструкции:

:s/[regexp]/[simbols]/

Для замены всех совпадений в текущей строке, добавляем "g" в конце
команды:

:s/[regexp]/[simbols]/g

Для замены совпадений во всем файле, преобразуем команду к следующему
виду:

:%s/[regexp]/[simbols]/g

@@n Сворачивание блоков кода в VIM 
@@t linux terminal vim blocks code fold folding 
@@d

VIM может сворачивать текстовые блоки по следующим правилам:

- ручное сворачивание по метке (описано в :help fold-manual)
- сворачивание на основании отступов в начале строк (описано в :help
  fold-indent)
- использование выражений для сворачивания (описано в :help fold-expr)
- сворачивание на основании синтаксиса (описано в :help fold-syntax)
- использование разницы – сворачивание не изменившегося текста
  (описано в :help fold-diff)
- вставка в тексте маркеров для обозначения точки сворачивания
  (описано в :help fold-marker)

Для начала использования необходимо активировать возможность
сворачивания :set foldenable Затем задать правило для сворачивания,
например, :set foldmethod=indent (сворачивание на основании отступов в
начале строк)

Команды для создания свертки блоков

zf#j - создает свертку от текущей позиции до # строк вниз

zf/подстрока - создает свертку от текущей позиции и до первой
найденной подстроки

v/V и zf - выделение блока и создание свертки

Команды для управления

zc – свернуть блок

zo – развернуть блок

zM – закрыть все блоки

zR – открыть все блоки

za – инвертирование (если открыто – закрыть, если закрыто – открыть)

zj - переход к следующей свертке

zk - переход к предыдущей свертке

zd - удалить свертку под курсором

zD - удалить все свертки

[z - перейти к началу текущей свертки

]z - перейти к концу текущей свертки

После закрытия vim все свертки забываться, для сохранения сверток в
открытом файле используется команда :mkview, для загрузки - loadview.

@@n Вставка спецсимволов в vim
@@t symbol special ascii спецсимволы символы
@@d 11.06.16

Для вставки некоторых спецсимволов можно воспользоваться сочетанием
клавиш CTRL+K и последующим вводом двухсимвольного кода символа из
таблицы:

Вставка unicode символа осуществляется нажатием клавиш "CTRL+V u" (в
режиме вставки или замены) и последующим вводом шестнадцатиричного кода
символа.
Для построения псевдографики наибольшее применение нашли символы из
следующей таблицы:

┌────┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐
│    │ 0 │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 │ 9 │ a │ b │ c │ d │ e │ f │
├────┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│2500│ ─ │ ━ │ │ │ ┃ │ ┄ │ ┅ │ ┆ │ ┇ │ ┈ │ ┉ │ ┊ │ ┋ │ ┌ │ ┍ │ ┎ │ ┏ │
├────┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│2510│ ┐ │ ┑ │ ┒ │ ┓ │ └ │ ┕ │ ┖ │ ┗ │ ┘ │ ┙ │ ┚ │ ┛ │ ├ │ ┝ │ ┞ │ ┟ │
├────┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│2520│ ┠ │ ┡ │ ┢ │ ┣ │ ┤ │ ┥ │ ┦ │ ┧ │ ┨ │ ┩ │ ┪ │ ┫ │ ┬ │ ┭ │ ┮ │ ┯ │
├────┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│2530│ ┰ │ ┱ │ ┲ │ ┳ │ ┴ │ ┵ │ ┶ │ ┷ │ ┸ │ ┹ │ ┺ │ ┻ │ ┼ │ ┽ │ ┾ │ ┿ │
├────┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│2540│ ╀ │ ╁ │ ╂ │ ╃ │ ╄ │ ╅ │ ╆ │ ╇ │ ╈ │ ╉ │ ╊ │ ╋ │ ╌ │ ╍ │ ╎ │ ╏ │
├────┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│2550│ ═ │ ║ │ ╒ │ ╓ │ ╔ │ ╕ │ ╖ │ ╗ │ ╘ │ ╙ │ ╚ │ ╛ │ ╜ │ ╝ │ ╞ │ ╟ │
├────┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│2560│ ╠ │ ╡ │ ╢ │ ╣ │ ╤ │ ╥ │ ╦ │ ╧ │ ╨ │ ╩ │ ╪ │ ╫ │ ╬ │ ╭ │ ╮ │ ╯ │
├────┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│2570│ ╰ │ ╱ │ ╲ │ ╳ │ ╴ │ ╵ │ ╶ │ ╷ │ ╸ │ ╹ │ ╺ │ ╻ │ ╼ │ ╽ │ ╾ │ ╿ │
├────┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│2580│ ▀ │ ▁ │ ▂ │ ▃ │ ▄ │ ▅ │ ▆ │ ▇ │ █ │ ▉ │ ▊ │ ▋ │ ▌ │ ▍ │ ▎ │ ▏ │
├────┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│2590│ ▐ │ ░ │ ▒ │ ▓ │ ▔ │ ▕ │ ▖ │ ▗ │ ▘ │ ▙ │ ▚ │ ▛ │ ▜ │ ▝ │ ▞ │ ▟ │
├────┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│25a0│ ■ │ □ │ ▢ │ ▣ │ ▤ │ ▥ │ ▦ │ ▧ │ ▨ │ ▩ │ ▪ │ ▫ │ ▬ │ ▭ │ ▮ │ ▯ │
├────┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│25b0│ ▰ │ ▱ │ ▲ │ △ │ ▴ │ ▵ │ ▶ │ ▷ │ ▸ │ ▹ │ ► │ ▻ │ ▼ │ ▽ │ ▾ │ ▿ │
├────┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│25c0│ ◀ │ ◁ │ ◂ │ ◃ │ ◄ │ ◅ │ ◆ │ ◇ │ ◈ │ ◉ │ ◊ │ ○ │ ◌ │ ◍ │ ◎ │ ● │
├────┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│25d0│ ◐ │ ◑ │ ◒ │ ◓ │ ◔ │ ◕ │ ◖ │ ◗ │ ◘ │ ◙ │ ◚ │ ◛ │ ◜ │ ◝ │ ◞ │ ◟ │
├────┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│25e0│ ◠ │ ◡ │ ◢ │ ◣ │ ◤ │ ◥ │ ◦ │ ◧ │ ◨ │ ◩ │ ◪ │ ◫ │ ◬ │ ◭ │ ◮ │ ◯ │
├────┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│25f0│ ◰ │ ◱ │ ◲ │ ◳ │ ◴ │ ◵ │ ◶ │ ◷ │ ◸ │ ◹ │ ◺ │ ◻ │ ◼ │ ◽ │ ◾ │ ◿ │
└────┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┘

Некоторые управляющие символы:
┌────┬───┬───────────────────────────────────────────────────────────┐
│0000│  │ Пустой символ                                             │
├────┼───┼───────────────────────────────────────────────────────────┤
│0008│ │ Забой                                                     │
├────┼───┼───────────────────────────────────────────────────────────┤
│0009│ 	 │ Горизонтальная табуляция                                  │
├────┼───┼───────────────────────────────────────────────────────────┤
│000d│ │ Перевод строки                                            │
├────┼───┼───────────────────────────────────────────────────────────┤
│001b│ │ Начало управляющей последовательности                     │
└────┴───┴───────────────────────────────────────────────────────────┘

Группы символов unicode:
22nn - Математические операторы
23nn - Разнообразные технические символы
24nn - Вложенные буквы и цифры
2500-257f - Символы рисования рамок
2580-259f - Символы заполнения
26nn - Разнообразные графические символы
28nn - Азбука Брайля
0000-001f - Управляющие символы


@@n Менеджер плагинов Vundle
@@t vundle bundle plugin
@@d 15.06.15

Установка Vundle:

$ git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle

В vimrc обязательно прописать:

| set nocompatible
| filetype off
| set rtp+=~/.vim/bundle/vundle/
| call vundle#rc()
| filetype plugin indent on
| 
| "Список репозиториев
| Bundle 'gmarik/vundle'
| ....

Установка плагинов прописанных в vimrc (команда выполняется в vim):

:BundleInstall

Удаление плагинов:
1 В vimrc закоментировать плагины, которые нужно удалить.
2 В vim выполнить команду:
:BundleClean


@@n Поддержка python в vim
@@t python vim autocomplete
@@d 15.06.16

Поддержка python в vim возможна после установки vim-nox:

# aptitude install vim-nox

Для автодополнения python команд нужно установить плагин jedi-vim:
- в vimrc добавить запись:

| Bundle 'davidhalter/jedi-vim'

В vim выполнить команду:

:BundleInstall
.
